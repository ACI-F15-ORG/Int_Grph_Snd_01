Goal- Adjust pitch of my voice to match someone else's.  
1-Send push button input to OF (OK)
2-When button received, take audio into openframeworks and analyze pitch. (NOT OK)
3-Send pitch analysis back to Arduino (Getting there) 
4-Adjust Arduino Wav Shield distortion based on this data, so that audio outputted will have a similar pitch. (Getting there) 


Basically-
 
//--------------------------------------------------------------
void ofApp::digitalPinChanged(const int & pinNum) {
      buttonState = ofToString(ard.getDigital(pinNum));
      if(buttonState ==1){
      cout<< "button high" << endl;
      startPitchDetection();
	}
	else{
	stopPitchShift();
	}
}

//--------------------------------------------------------------

void ofApp:: startPitchDetection();{

	
        startTimer --- //don't want to get pitch data instantly, probably better to do over a 10 second sample
	newPitchDetection= Store pitch readings in an array        
	if(Timer >= 10){
        
        newPitchDetecion/#in array ...// take an average somehow, I know this is not right...
	pitchValue = newPitchDetection(...);
	startPitchShift();
        }
}

void ofApp::startPitchShift() {
        ard.analogWrite(pinNum, pitchValue); // write data to analog pin of Ard
  
} 


3.Starting backwards, I got a wav shield for Arduino that is capable of distorting audio in realtime. After soldering together, installing library, formatting SD card, example code runs fine. They have theirs distorting based on the analogRead of a potentiometer, and mapping the values. So instead of reading potentiometer, I'll use the value I find from pitchDetection in OF.

2.Tested communication with Arduino through firmata and serial on OF, both work fine. */ update, Serial makes more sense than firmata, since I am using libraries and firmata seems to only work with standard firmata on Arduino. This really changes structure of OF code, since it will now be based on reading and write bytes.
   
	SO now its more like:

	byte1= Serial.read;
	if(byte1 == 'B'){
        //button has been pushed!
        startPitchDetection();
	}
	
        //... after detection.........
	pitchByte = pitchDectection;	
	Serial.write(pitchBye);

   
1. Pitch analysis...started with installing the other fFT library (by Kyle McDonald) required a couple changes to work on linux, had to make sure I had installed FFTW library (sudo apt-get install libfftw3-dev) add line of code to config.make file (USER_LDFLAGS=-lfftw3f)and also copy src files from examples to an empty example app because they were generated for Mac. Got basic example running ok.

Problem 1- Run a Pitch Detection example found online which uses Aubio

I read that it was best to analyze pitch through 'aubio' so I downloaded several different aubio wrapper addons, none of which could compile due to 'undefined reference to new_fvec.' Checked to make sure aubio is uptodate, apt-cache search aubio, installed files found there, still get same error. tried to add USER_LDFLAGS=-laubio because that was the problem with fft addon. Now it compiles! This is just an empty example with fft and aubio addons, mind you, still no code.   

Then I generated a new project with fft and aubio addons, and then added the code from the pitch example I found online. It threw errors for this line:
		pitch_output = new_aubio_pitchdetection(win_s, hop_s, channels, samplerate); 
saying it should be (win_s, hop_s, channels, samplerate, type, mode); 
[it was missing type, mode] and it was pointing to the pitchdetection.h file, which is included in aubio.h, which is included in the addon. SO I changed that and now I get 
		undefined reference to 'new_aubio_pitchdetection' 
which I don't understand why because I can see it defined in pitchdetection.h . Can't figure out what's wrong here. (crying emoji) I would imagine it's a problem with headers but they look right to me... ! wah. Give up. 


Third Plan - Since it seems like detecting pitch is a pretty big deal to complete so fast, I figured I'll make a simulation of the whole project, with just random values standing in for pitchDetect. Decided to use a Timer Addon so that I could start a timer, and only send pitchValue with timer is finished.

	Problem with timer: I have a cout << for when the timer is finished, and it waits 5 seconds before printing that. However in the same function (timerComplete) I ask it to generate random values for the pitchDetect, and it does this constantly, rather than waiting 5 seconds. Hmmm

	Problem with serial: When I read the bytes from the Arduino side, they are coming in 0,10 range. (should be 0, 1023) A quick google search says it may be Linux related, need to spend more time on that.  


 
